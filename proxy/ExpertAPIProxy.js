//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./ExpertAPIProxy_types');
//HELPER FUNCTIONS AND STRUCTURES

ExpertAPIProxy_details_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
ExpertAPIProxy_details_args.prototype = {};
ExpertAPIProxy_details_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpertAPIProxy_details_args.prototype.write = function(output) {
  output.writeStructBegin('ExpertAPIProxy_details_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpertAPIProxy_details_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ExpertAPIProxy_details_result.prototype = {};
ExpertAPIProxy_details_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpertAPIProxy_details_result.prototype.write = function(output) {
  output.writeStructBegin('ExpertAPIProxy_details_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpertAPIProxy_auto2talk_args = function(args) {
  this.id = null;
  this.question = null;
  this.num = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.question !== undefined) {
      this.question = args.question;
    }
    if (args.num !== undefined) {
      this.num = args.num;
    }
  }
};
ExpertAPIProxy_auto2talk_args.prototype = {};
ExpertAPIProxy_auto2talk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.question = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.num = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpertAPIProxy_auto2talk_args.prototype.write = function(output) {
  output.writeStructBegin('ExpertAPIProxy_auto2talk_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.question !== null && this.question !== undefined) {
    output.writeFieldBegin('question', Thrift.Type.STRING, 2);
    output.writeString(this.question);
    output.writeFieldEnd();
  }
  if (this.num !== null && this.num !== undefined) {
    output.writeFieldBegin('num', Thrift.Type.I32, 3);
    output.writeI32(this.num);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpertAPIProxy_auto2talk_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ExpertAPIProxy_auto2talk_result.prototype = {};
ExpertAPIProxy_auto2talk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpertAPIProxy_auto2talk_result.prototype.write = function(output) {
  output.writeStructBegin('ExpertAPIProxy_auto2talk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpertAPIProxy_multipart2talk_args = function(args) {
  this.question = null;
  if (args) {
    if (args.question !== undefined) {
      this.question = args.question;
    }
  }
};
ExpertAPIProxy_multipart2talk_args.prototype = {};
ExpertAPIProxy_multipart2talk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.question = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpertAPIProxy_multipart2talk_args.prototype.write = function(output) {
  output.writeStructBegin('ExpertAPIProxy_multipart2talk_args');
  if (this.question !== null && this.question !== undefined) {
    output.writeFieldBegin('question', Thrift.Type.STRING, 1);
    output.writeString(this.question);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpertAPIProxy_multipart2talk_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ExpertAPIProxy_multipart2talk_result.prototype = {};
ExpertAPIProxy_multipart2talk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpertAPIProxy_multipart2talk_result.prototype.write = function(output) {
  output.writeStructBegin('ExpertAPIProxy_multipart2talk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpertAPIProxy_tweets_args = function(args) {
  this.id = null;
  this.pageNum = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.pageNum !== undefined) {
      this.pageNum = args.pageNum;
    }
  }
};
ExpertAPIProxy_tweets_args.prototype = {};
ExpertAPIProxy_tweets_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pageNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpertAPIProxy_tweets_args.prototype.write = function(output) {
  output.writeStructBegin('ExpertAPIProxy_tweets_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.pageNum !== null && this.pageNum !== undefined) {
    output.writeFieldBegin('pageNum', Thrift.Type.I32, 2);
    output.writeI32(this.pageNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpertAPIProxy_tweets_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ExpertAPIProxy_tweets_result.prototype = {};
ExpertAPIProxy_tweets_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpertAPIProxy_tweets_result.prototype.write = function(output) {
  output.writeStructBegin('ExpertAPIProxy_tweets_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpertAPIProxy_articles_args = function(args) {
  this.id = null;
  this.pageNum = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.pageNum !== undefined) {
      this.pageNum = args.pageNum;
    }
  }
};
ExpertAPIProxy_articles_args.prototype = {};
ExpertAPIProxy_articles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pageNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpertAPIProxy_articles_args.prototype.write = function(output) {
  output.writeStructBegin('ExpertAPIProxy_articles_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.pageNum !== null && this.pageNum !== undefined) {
    output.writeFieldBegin('pageNum', Thrift.Type.I32, 2);
    output.writeI32(this.pageNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpertAPIProxy_articles_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ExpertAPIProxy_articles_result.prototype = {};
ExpertAPIProxy_articles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpertAPIProxy_articles_result.prototype.write = function(output) {
  output.writeStructBegin('ExpertAPIProxy_articles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpertAPIProxyClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ExpertAPIProxyClient.prototype = {};
ExpertAPIProxyClient.prototype.seqid = function() { return this._seqid; }
ExpertAPIProxyClient.prototype.new_seqid = function() { return this._seqid += 1; }
ExpertAPIProxyClient.prototype.details = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_details(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_details(id);
  }
};

ExpertAPIProxyClient.prototype.send_details = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('details', Thrift.MessageType.CALL, this.seqid());
  var args = new ExpertAPIProxy_details_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ExpertAPIProxyClient.prototype.recv_details = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ExpertAPIProxy_details_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('details failed: unknown result');
};
ExpertAPIProxyClient.prototype.auto2talk = function(id, question, num, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_auto2talk(id, question, num);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_auto2talk(id, question, num);
  }
};

ExpertAPIProxyClient.prototype.send_auto2talk = function(id, question, num) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('auto2talk', Thrift.MessageType.CALL, this.seqid());
  var args = new ExpertAPIProxy_auto2talk_args();
  args.id = id;
  args.question = question;
  args.num = num;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ExpertAPIProxyClient.prototype.recv_auto2talk = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ExpertAPIProxy_auto2talk_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('auto2talk failed: unknown result');
};
ExpertAPIProxyClient.prototype.multipart2talk = function(question, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_multipart2talk(question);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_multipart2talk(question);
  }
};

ExpertAPIProxyClient.prototype.send_multipart2talk = function(question) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('multipart2talk', Thrift.MessageType.CALL, this.seqid());
  var args = new ExpertAPIProxy_multipart2talk_args();
  args.question = question;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ExpertAPIProxyClient.prototype.recv_multipart2talk = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ExpertAPIProxy_multipart2talk_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('multipart2talk failed: unknown result');
};
ExpertAPIProxyClient.prototype.tweets = function(id, pageNum, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_tweets(id, pageNum);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_tweets(id, pageNum);
  }
};

ExpertAPIProxyClient.prototype.send_tweets = function(id, pageNum) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('tweets', Thrift.MessageType.CALL, this.seqid());
  var args = new ExpertAPIProxy_tweets_args();
  args.id = id;
  args.pageNum = pageNum;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ExpertAPIProxyClient.prototype.recv_tweets = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ExpertAPIProxy_tweets_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('tweets failed: unknown result');
};
ExpertAPIProxyClient.prototype.articles = function(id, pageNum, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_articles(id, pageNum);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_articles(id, pageNum);
  }
};

ExpertAPIProxyClient.prototype.send_articles = function(id, pageNum) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('articles', Thrift.MessageType.CALL, this.seqid());
  var args = new ExpertAPIProxy_articles_args();
  args.id = id;
  args.pageNum = pageNum;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ExpertAPIProxyClient.prototype.recv_articles = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ExpertAPIProxy_articles_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('articles failed: unknown result');
};
ExpertAPIProxyProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ExpertAPIProxyProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ExpertAPIProxyProcessor.prototype.process_details = function(seqid, input, output) {
  var args = new ExpertAPIProxy_details_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.details.length === 1) {
    Q.fcall(this._handler.details, args.id)
      .then(function(result) {
        var result = new ExpertAPIProxy_details_result({success: result});
        output.writeMessageBegin("details", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("details", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.details(args.id, function (err, result) {
      if (err == null) {
        var result = new ExpertAPIProxy_details_result((err != null ? err : {success: result}));
        output.writeMessageBegin("details", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("details", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ExpertAPIProxyProcessor.prototype.process_auto2talk = function(seqid, input, output) {
  var args = new ExpertAPIProxy_auto2talk_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.auto2talk.length === 3) {
    Q.fcall(this._handler.auto2talk, args.id, args.question, args.num)
      .then(function(result) {
        var result = new ExpertAPIProxy_auto2talk_result({success: result});
        output.writeMessageBegin("auto2talk", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("auto2talk", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.auto2talk(args.id, args.question, args.num, function (err, result) {
      if (err == null) {
        var result = new ExpertAPIProxy_auto2talk_result((err != null ? err : {success: result}));
        output.writeMessageBegin("auto2talk", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("auto2talk", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ExpertAPIProxyProcessor.prototype.process_multipart2talk = function(seqid, input, output) {
  var args = new ExpertAPIProxy_multipart2talk_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.multipart2talk.length === 1) {
    Q.fcall(this._handler.multipart2talk, args.question)
      .then(function(result) {
        var result = new ExpertAPIProxy_multipart2talk_result({success: result});
        output.writeMessageBegin("multipart2talk", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("multipart2talk", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.multipart2talk(args.question, function (err, result) {
      if (err == null) {
        var result = new ExpertAPIProxy_multipart2talk_result((err != null ? err : {success: result}));
        output.writeMessageBegin("multipart2talk", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("multipart2talk", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ExpertAPIProxyProcessor.prototype.process_tweets = function(seqid, input, output) {
  var args = new ExpertAPIProxy_tweets_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.tweets.length === 2) {
    Q.fcall(this._handler.tweets, args.id, args.pageNum)
      .then(function(result) {
        var result = new ExpertAPIProxy_tweets_result({success: result});
        output.writeMessageBegin("tweets", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("tweets", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.tweets(args.id, args.pageNum, function (err, result) {
      if (err == null) {
        var result = new ExpertAPIProxy_tweets_result((err != null ? err : {success: result}));
        output.writeMessageBegin("tweets", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("tweets", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ExpertAPIProxyProcessor.prototype.process_articles = function(seqid, input, output) {
  var args = new ExpertAPIProxy_articles_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.articles.length === 2) {
    Q.fcall(this._handler.articles, args.id, args.pageNum)
      .then(function(result) {
        var result = new ExpertAPIProxy_articles_result({success: result});
        output.writeMessageBegin("articles", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("articles", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.articles(args.id, args.pageNum, function (err, result) {
      if (err == null) {
        var result = new ExpertAPIProxy_articles_result((err != null ? err : {success: result}));
        output.writeMessageBegin("articles", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("articles", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

